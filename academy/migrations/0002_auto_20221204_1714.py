# Generated by Django 4.1.2 on 2022-12-04 11:14

from django.db import migrations

from django.contrib.auth.models import User
from django.contrib.auth.models import Group

import datetime

def beginning(apps, schema_editor):
    
    # Суперпользователь id-1
    user = User.objects.create_superuser(username='root',
    email='samga0412@mail.ru',
    password='SsNn5678+-@', 
    last_login=datetime.datetime.now())
    print("Суперпользователь создан")
    
    # Группа менеджеров
    managers = Group.objects.get_or_create(name = 'Managers')
    managers = Group.objects.get(name='Managers')
    print("Группа менеджеров создана")
    
    # Пользователь с ролью менеджера id2
    user = User.objects.create_user(username='manager', password='Ss0066+-', email='manager@mail.ru', first_name='Менеджер', last_name='', last_login=datetime.datetime.now())
    managers.user_set.add(user)
    print("Менеджер добавлен в группу менеджеров")

    # Простые пользователи (заявители) id3-27
    user = User.objects.create_user(username='user1', password='Uu0066+-', email='user1@mail.ru', first_name='Дина', last_name='Мусина', last_login=datetime.datetime.now())
    user = User.objects.create_user(username='user2', password='Uu0066+-', email='user2@mail.ru', first_name='Адия', last_name='Жунусова', last_login=datetime.datetime.now())
    user = User.objects.create_user(username='user3', password='Uu0066+-', email='user3@mail.ru', first_name='Айнура', last_name='Кенина', last_login=datetime.datetime.now())
    user = User.objects.create_user(username='user4', password='Uu0066+-', email='user4@mail.ru', first_name='Рустем', last_name='Какимов', last_login=datetime.datetime.now())
    user = User.objects.create_user(username='user5', password='Uu0066+-', email='user5@mail.ru', first_name='Алишер', last_name='Кабдуалиев', last_login=datetime.datetime.now())
    user = User.objects.create_user(username='user6', password='Uu0066+-', email='user6@mail.ru', first_name='Бауржан', last_name='Арыкбаев', last_login=datetime.datetime.now())
    user = User.objects.create_user(username='user7', password='Uu0066+-', email='user7@mail.ru', first_name='Алишер', last_name='Танатаров', last_login=datetime.datetime.now())
    user = User.objects.create_user(username='user8', password='Uu0066+-', email='user8@mail.ru', first_name='Мерует', last_name='Искакова', last_login=datetime.datetime.now())
    user = User.objects.create_user(username='user9', password='Uu0066+-', email='user9@mail.ru', first_name='Ольга', last_name='Муравьева', last_login=datetime.datetime.now())
    user = User.objects.create_user(username='user10', password='Uu0066+-', email='user10@mail.ru', first_name='Ақжарқын', last_name='Сансызбаева', last_login=datetime.datetime.now())
    user = User.objects.create_user(username='user11', password='Uu0066+-', email='user11@mail.ru', first_name='Арайлым', last_name='Алматова', last_login=datetime.datetime.now())
    user = User.objects.create_user(username='user12', password='Uu0066+-', email='user12@mail.ru', first_name='Айгерім', last_name='Дүйсенбиева', last_login=datetime.datetime.now())
    user = User.objects.create_user(username='user13', password='Uu0066+-', email='user13@mail.ru', first_name='Салтанат', last_name='Зиноллаева', last_login=datetime.datetime.now())
    user = User.objects.create_user(username='user14', password='Uu0066+-', email='user14@mail.ru', first_name='Сейтқасым', last_name='Болат', last_login=datetime.datetime.now())
    user = User.objects.create_user(username='user15', password='Uu0066+-', email='user15@mail.ru', first_name='Сара', last_name='Фазилова', last_login=datetime.datetime.now())
    user = User.objects.create_user(username='user16', password='Uu0066+-', email='user16@mail.ru', first_name='Бектас', last_name='Ерсейіт', last_login=datetime.datetime.now())
    user = User.objects.create_user(username='user17', password='Uu0066+-', email='user17@mail.ru', first_name='Диас', last_name='Мырзаш', last_login=datetime.datetime.now())
    user = User.objects.create_user(username='user18', password='Uu0066+-', email='user18@mail.ru', first_name='Нұржан', last_name='Жүрсінбек', last_login=datetime.datetime.now())
    user = User.objects.create_user(username='user19', password='Uu0066+-', email='user19@mail.ru', first_name='Дина', last_name='Жағыпар', last_login=datetime.datetime.now())
    user = User.objects.create_user(username='user20', password='Uu0066+-', email='user20@mail.ru', first_name='Жастілек', last_name='Жасталап', last_login=datetime.datetime.now())
    user = User.objects.create_user(username='user21', password='Uu0066+-', email='user21@mail.ru', first_name='Еркебұлан', last_name='Қадыхан', last_login=datetime.datetime.now())
    user = User.objects.create_user(username='user22', password='Uu0066+-', email='user22@mail.ru', first_name='Молдир', last_name='Бутабекова', last_login=datetime.datetime.now())
    user = User.objects.create_user(username='user23', password='Uu0066+-', email='user23@mail.ru', first_name='Аружан', last_name='Таурбекова', last_login=datetime.datetime.now())
    user = User.objects.create_user(username='user24', password='Uu0066+-', email='user24@mail.ru', first_name='Алтынай', last_name='Қожанова', last_login=datetime.datetime.now())
    user = User.objects.create_user(username='user25', password='Uu0066+-', email='user25@mail.ru', first_name='Эльнара', last_name='Иминова', last_login=datetime.datetime.now())
    print("Созданы простые пользователи")
        
    ##### Новости #####
    News = apps.get_model("academy", "News")
    
    news = News()
    news.daten = '2022-07-23 12:00:00'
    news.title = 'Озвучена дата начала регистрации на августовское ЕНТ'
    news.details = """Регистрация на августовское платное ЕНТ пройдет с 25 по 30 июля.
    Регистрация на августовское ЕНТ будет проходить на сайте app.testcenter.kz с 25 по 30 июля. Само тестирование пройдет с 10 по 13 августа."""
    news.photo = 'images/news1.jpeg' 
    news.save()
    
    news = News()
    news.daten = '2022-07-31 13:00:00'
    news.title = 'Казахстанские школьники завоевали на международных олимпиадах 23 медали'
    news.details =  """3 золотые, 13 серебряных и 7 бронзовых медалей завоевали казахстанские школьники на самых престижных международных предметных олимпиадах.
    Таким образом, по промежуточным итогам в копилке сборной 23 медали по 6 предметам, передает пресс-служба Министерства просвещения РК.
    На международной олимпиаде по математике (IMO) сборная Казахстана завоевала 3 серебра и 3 бронзы.
    При этом команда набрала 174 балла, установив новый рекорд за всю историю участия страны в данной олимпиаде, и показала лучший результат за последние 12 лет. """
    news.photo = 'images/news2.jpeg' 
    news.save()
    
    news = News()
    news.daten = '2022-09-01 13:00:00'
    news.title = 'Льготные кредиты на обучение в вузах появятся в Казахстане'
    news.details = """Президент Казахстана Касым-Жомарт Токаев предложил новые меры для выделения грантов студентам
    Глава государства заявил, что по мере повышения качества отечественных вузов будет возрастать и стоимость обучения в них.
    "Поэтому государство планирует выделять образовательные гранты, которые в зависимости от результатов ЕНТ и иных показателей будут дифференцированы по размеру - от 30 до 100 процентов. Будут предоставляться и льготные кредиты на обучение под 2-3 процента годовых. Указанные меры сделают высшее образование более доступным, а также укрепят в обществе идеологию партнерства и взаимной ответственности", - сказал Президент."""
    news.photo = 'images/news3.jpeg' 
    news.save()
    
    news = News()
    news.daten = '2022-09-03 14:00:00'
    news.title = 'О новой системе грантов и кредитах на обучение рассказал министр'
    news.details = """Министр науки и высшего образования Саясат Нурбек рассказал, как будет работать новая система распределения образовательных грантов в Казахстане.
    Саясат Нурбек заявил, что в министерстве прорабатываются подходы по введению дифференцированного гранта. По его словам, данное поручение Президента чрезвычайно актуально в контексте демографических трендов и роста стоимости обучения.
    "Студентам будет предоставлена возможность получения образовательного кредита под 2-3 процента годовых. В качестве инструмента накопления средств на получение образования прорабатываем использование ГОНС совместно с Министерством просвещения в зависимости от возраста детей и студентов", - отметил Саясат Нурбек."""
    news.photo = 'images/news4.jpeg' 
    news.save()
    
    news = News()
    news.daten = '2022-09-19 15:00:00'
    news.title = 'Отличившимся - гранты: отслужившие казахстанцы смогут поступать в вузы без ЕНТ'
    news.details = """Казахстанцы, отслужившие срочную воинскую службу, смогут поступить в вуз без учета баллов ЕНТ, а отличившимся срочникам предоставят гранты. Об этом сообщили в пресс-службе Министерства обороны.
    Совместный проект Минобороны и Министерства науки и высшего образования предусматривает предоставление всем гражданам, отслужившим срочную воинскую службу, возможности поступления на обучение в вузы на платной основе в течение двух лет после прохождения срочной воинской службы по результатам собеседования, без учета результатов ЕНТ. """
    news.photo = 'images/news5.jpeg' 
    news.save()
    
    news = News()
    news.daten = '2022-09-21 16:00:00'
    news.title = 'Появились бесплатные видеоуроки для казахстанских школьников'
    news.details = """Казахстанские школьники получили бесплатный доступ к онлайн-урокам.
    Ученики 1-11 классов могут в свободном доступе получать уроки онлайн-репетиторов на сайте Mektep-online.kz и на одноименном YouТube-канале по основным предметам школьной программы на двух языках.
    "Mektep-online - это сайт, на котором собраны и структурированы около четырех тысяч видеоуроков по программе младшей, средней и старшей школы, на YouTube-каналах Mektep-online представлены уроки по математике, химии, биологии, физике, геометрии. А с сентября 2022 года появился игровой образовательный контент для 1-4 классов ARMAN kids", - рассказала представитель частного фонда, разработавшего платформу, Балия Акимбекова. """
    news.photo = 'images/news6.jpeg' 
    news.save()
    
    news = News()
    news.daten = '2022-09-23 17:00:00'
    news.title = '"Как IELTS и TOEFL". Формат ЕНТ планируют изменить в Казахстане'
    news.details = """Формат Единого национального тестирования (ЕНТ) планируют изменить в Казахстане, приблизив к форматам IELTS и ТOEFL. Об этом сообщил министр науки и высшего образования Саясат Нурбек.
    Саясат Нурбек прокомментировал аннулирование результатов ЕНТ 153 выпускников школ после просмотра камер видеонаблюдения. Министр отметил, что эта практика не совсем справедливая.
    "Внедрены системы прокторинга - камеры, видеонаблюдение из двух углов, чтобы фиксировать в автоматическом режиме любые неправомерные действия сдающего тест абитуриента. И после этого идет анализ видеоматериала и фиксируется, было или нет нарушение. И по итогам этого анализа принимается решение об аннулировании. Согласен, не совсем справедливо забирать грант после того, как прошло определенное время. Поэтому мы сейчас проводим очень серьезную работу по двум направлениям", - сказал министр на брифинге СЦК.
    Во-первых, по его словам, в стране пересмотрят формат ЕНТ и его содержательную часть. Тест будет не просто давать правильные и неправильные варианты ответов, а проверять функциональную грамотность, уровень подготовки и пробелы в знаниях. """
    news.photo = 'images/news7.jpeg' 
    news.save()
    
    print("Новости добавлены")

    ##### Преподаватели #####
    Teachers = apps.get_model("academy", "Teachers")
    
    teachers = Teachers()
    teachers.surname = 'Ибрагимова' 
    teachers.name = 'Зарина' 
    teachers.patronymic = 'Тахировна' 
    teachers.details = 'Математическая грамотность' 
    teachers.photo = 'images/woman1.jpg' 
    teachers.save()
    
    teachers = Teachers()
    teachers.surname = 'Зордунова' 
    teachers.name = 'Анар' 
    teachers.patronymic = 'Касымжановна' 
    teachers.details = 'Информатика'
    teachers.photo = 'images/woman2.jpg' 
    teachers.save()
    
    teachers = Teachers()
    teachers.surname = 'Рахимбаева' 
    teachers.name = 'Айгерим' 
    teachers.patronymic = 'Айбековна' 
    teachers.details = 'История Казахстана'
    teachers.photo = 'images/woman3.jpg' 
    teachers.save()
    
    teachers = Teachers()
    teachers.surname = 'Есентаева' 
    teachers.name = 'Наргиз' 
    teachers.patronymic = 'Рустемовна' 
    teachers.details = 'Математика'
    teachers.photo = 'images/woman4.jpg' 
    teachers.save()
    
    teachers = Teachers()
    teachers.surname = 'Сорокина' 
    teachers.name = 'Надежда' 
    teachers.patronymic = 'Владимировна'
    teachers.details = 'Физика'
    teachers.photo = 'images/woman5.jpg' 
    teachers.save()
    
    teachers = Teachers()
    teachers.surname = 'Оразалиева' 
    teachers.name = 'Мадина' 
    teachers.patronymic = 'Сарыпбековна' 
    teachers.details = 'Химия'
    teachers.photo = 'images/woman6.jpg' 
    teachers.save()
    
    teachers = Teachers()
    teachers.surname = 'Прутникова' 
    teachers.name = 'Кристина' 
    teachers.patronymic = 'Сергеевна' 
    teachers.details = 'Биология'
    teachers.photo = 'images/woman7.jpg' 
    teachers.save()
    
    teachers = Teachers()
    teachers.surname = 'Илюбаев' 
    teachers.name = 'Рахимбек' 
    teachers.patronymic = 'Максатович' 
    teachers.details = 'География'
    teachers.photo = 'images/male1.jpg' 
    teachers.save()
    
    teachers = Teachers()
    teachers.surname = 'Аркинов' 
    teachers.name = 'Алишер' 
    teachers.patronymic = 'Мухамедович' 
    teachers.details = 'Всемирная история'
    teachers.photo = 'images/male2.jpg' 
    teachers.save()
    
    teachers = Teachers()
    teachers.surname = 'Сембиев' 
    teachers.name = 'Алдияр' 
    teachers.patronymic = 'Нурланович' 
    teachers.details = 'Основы права'
    teachers.photo = 'images/male3.jpg' 
    teachers.save()

    print("Преподаватели добавлены")
    
    ##### Курсы #####
    Training = apps.get_model("academy", "Training")
    
    training = Training()
    training.title = 'Математическая грамотность' 
    training.details = 'Математическая грамотность' 
    training.save()

    training = Training()
    training.title = 'Информатика' 
    training.details = 'Информатика' 
    training.save()
    
    training = Training()
    training.title = 'История Казахстана' 
    training.details = 'История Казахстана' 
    training.save()
    
    training = Training()
    training.title = 'Математика' 
    training.details = 'Математика' 
    training.save()
    
    training = Training()
    training.title = 'Физика' 
    training.details = 'Физика' 
    training.save()
    
    training = Training()
    training.title = 'Химия' 
    training.details = 'Химия' 
    training.save()
    
    training = Training()
    training.title = 'Биология' 
    training.details = 'Биология' 
    training.save()
    
    training = Training()
    training.title = 'География' 
    training.details = 'География' 
    training.save()
    
    training = Training()
    training.title = 'Всемирная история' 
    training.details = 'Всемирная история' 
    training.save()
    
    training = Training()
    training.title = 'Основы права' 
    training.details = 'Основы права' 
    training.save()
    
    print("Курсы добавлены")

    ##### Группы #####
    Groups = apps.get_model("academy", "Groups")
    
    groups = Groups()
    groups.training_id = 1
    groups.title = 'МГ22-1' 
    groups.details = 'Математическая грамотность' 
    groups.teachers_id = 1
    groups.save()
    
    groups = Groups()
    groups.training_id = 1
    groups.title = 'МГ22-2' 
    groups.details = 'Математическая грамотность' 
    groups.teachers_id = 2
    groups.save()
    
    groups = Groups()
    groups.training_id = 2
    groups.title = 'ИН22-1' 
    groups.details = 'Информатика' 
    groups.teachers_id = 3
    groups.save()
    
    groups = Groups()
    groups.training_id = 2
    groups.title = 'ИН22-2' 
    groups.details = 'Информатика' 
    groups.teachers_id = 4
    groups.save()
    
    groups = Groups()
    groups.training_id = 3
    groups.title = 'ИК22-1' 
    groups.details = 'История Казахстана' 
    groups.teachers_id = 5
    groups.save()
    
    groups = Groups()
    groups.training_id = 3
    groups.title = 'ИК22-2' 
    groups.details = 'История Казахстана' 
    groups.teachers_id = 6
    groups.save()

    print("Группы добавлены")

    ##### Состав группы #####
    Members = apps.get_model("academy", "Members")
    
    members = Members()
    members.groups_id = 1
    members.user_id = 3
    members.save()
    
    members = Members()
    members.groups_id = 1
    members.user_id = 4
    members.save()
    
    members = Members()
    members.groups_id = 1
    members.user_id = 5
    members.save()
    
    members = Members()
    members.groups_id = 1
    members.user_id = 6
    members.save()
    
    members = Members()
    members.groups_id = 2
    members.user_id = 7
    members.save()
    
    members = Members()
    members.groups_id = 2
    members.user_id = 8
    members.save()
    
    members = Members()
    members.groups_id = 2
    members.user_id = 9
    members.save()
    
    members = Members()
    members.groups_id = 3
    members.user_id = 10
    members.save()
    
    members = Members()
    members.groups_id = 3
    members.user_id = 11
    members.save()
    
    members = Members()
    members.groups_id = 3
    members.user_id = 12
    members.save()
    
    members = Members()
    members.groups_id = 3
    members.user_id = 13
    members.save()
    
    members = Members()
    members.groups_id = 3
    members.user_id = 14
    members.save()
    
    members = Members()
    members.groups_id = 4
    members.user_id = 15
    members.save()
    
    members = Members()
    members.groups_id = 4
    members.user_id = 16
    members.save()
    
    members = Members()
    members.groups_id = 4
    members.user_id = 17
    members.save()
    
    members = Members()
    members.groups_id = 4
    members.user_id = 18
    members.save()
    
    members = Members()
    members.groups_id = 5
    members.user_id = 19
    members.save()
    
    members = Members()
    members.groups_id = 5
    members.user_id = 20
    members.save()
    
    members = Members()
    members.groups_id = 5
    members.user_id = 21
    members.save()
    
    members = Members()
    members.groups_id = 5
    members.user_id = 22
    members.save()
    
    members = Members()
    members.groups_id = 6
    members.user_id = 23
    members.save()
    
    members = Members()
    members.groups_id = 6
    members.user_id = 24
    members.save()
    
    members = Members()
    members.groups_id = 6
    members.user_id = 25
    members.save()
    
    members = Members()
    members.groups_id = 6
    members.user_id = 26
    members.save()
    
    print("Состав группы добавлены")

    ##### Расписание #####
    Schedule = apps.get_model("academy", "Schedule")
    
    schedule = Schedule()
    schedule.dates = '2023-01-08 15:00:00'
    schedule.groups_id = 1
    schedule.save()
   
    schedule = Schedule()
    schedule.dates = '2023-01-08 15:00:00'
    schedule.groups_id = 2
    schedule.save()
    
    schedule = Schedule()
    schedule.dates = '2023-01-08 17:00:00'
    schedule.groups_id = 3
    schedule.save()
   
    schedule = Schedule()
    schedule.dates = '2023-01-08 17:00:00'
    schedule.groups_id = 4
    schedule.save()
    
    schedule = Schedule()
    schedule.dates = '2023-01-08 19:00:00'
    schedule.groups_id = 5
    schedule.save()
   
    schedule = Schedule()
    schedule.dates = '2023-01-08 19:00:00'
    schedule.groups_id = 6
    schedule.save()
    
    schedule = Schedule()
    schedule.dates = '2023-01-10 15:00:00'
    schedule.groups_id = 1
    schedule.save()
   
    schedule = Schedule()
    schedule.dates = '2023-01-10 15:00:00'
    schedule.groups_id = 2
    schedule.save()
    
    schedule = Schedule()
    schedule.dates = '2023-01-10 17:00:00'
    schedule.groups_id = 3
    schedule.save()
   
    schedule = Schedule()
    schedule.dates = '2023-01-10 17:00:00'
    schedule.groups_id = 4
    schedule.save()
    
    schedule = Schedule()
    schedule.dates = '2023-01-10 19:00:00'
    schedule.groups_id = 5
    schedule.save()
   
    schedule = Schedule()
    schedule.dates = '2023-01-10 19:00:00'
    schedule.groups_id = 6
    schedule.save()

    print("Расписание добавлены")
    
    ##### Оплата #####
    Payment = apps.get_model("academy", "Payment")
    
    payment = Payment()
    payment.datep = '2023-01-08 09:00:00'
    payment.amount = 6000
    payment.user_id = 3
    payment.save()
    
    payment = Payment()
    payment.datep = '2023-01-08 10:00:00'
    payment.amount = 6000
    payment.user_id = 4
    payment.save()
    
    payment = Payment()
    payment.datep = '2023-01-08 11:00:00'
    payment.amount = 6000
    payment.user_id = 5
    payment.save()
    
    payment = Payment()
    payment.datep = '2023-01-08 12:00:00'
    payment.amount = 6000
    payment.user_id = 6
    payment.save()
            
    payment = Payment()
    payment.datep = '2023-01-08 13:00:00'
    payment.amount = 6000
    payment.user_id = 7
    payment.save()
    
    payment = Payment()
    payment.datep = '2023-01-08 14:00:00'
    payment.amount = 6000
    payment.user_id = 8
    payment.save()
    
    payment = Payment()
    payment.datep = '2023-01-08 15:00:00'
    payment.amount = 6000
    payment.user_id = 9
    payment.save()
    
    payment = Payment()
    payment.datep = '2023-01-08 16:00:00'
    payment.amount = 6000
    payment.user_id = 10
    payment.save()

    payment = Payment()
    payment.datep = '2023-01-09 09:00:00'
    payment.amount = 6000
    payment.user_id = 11
    payment.save()
    
    payment = Payment()
    payment.datep = '2023-01-09 10:00:00'
    payment.amount = 6000
    payment.user_id = 12
    payment.save()
    
    payment = Payment()
    payment.datep = '2023-01-09 11:00:00'
    payment.amount = 6000
    payment.user_id = 13
    payment.save()
    
    payment = Payment()
    payment.datep = '2023-01-09 12:00:00'
    payment.amount = 6000
    payment.user_id = 14
    payment.save()
            
    payment = Payment()
    payment.datep = '2023-01-09 13:00:00'
    payment.amount = 6000
    payment.user_id = 15
    payment.save()
    
    payment = Payment()
    payment.datep = '2023-01-09 14:00:00'
    payment.amount = 6000
    payment.user_id = 16
    payment.save()
    
    payment = Payment()
    payment.datep = '2023-01-09 15:00:00'
    payment.amount = 6000
    payment.user_id = 17
    payment.save()
    
    payment = Payment()
    payment.datep = '2023-01-09 16:00:00'
    payment.amount = 6000
    payment.user_id = 18
    payment.save()

    print("Оплата добавлены")
    
    ##### Отзывы #####
    Reviews = apps.get_model("academy", "Reviews")
    
    reviews = Reviews()
    reviews.dater = '2023-01-08 15:00:00'
    reviews.rating = 5
    reviews.details = 'За семь месяцев подготовки у дочери восполнены пробелы в учебе за время карантина и с хорошими результатами она поступила в НИШ ФМН Алматы! Очень благодарны преподавателям и центру за качественное обучение, хорошее отношение и теплую атмосферу во время занятий!'
    reviews.user_id = 3
    reviews.save()
    
    reviews = Reviews()
    reviews.dater = '2023-01-09 16:00:00'
    reviews.rating = 5
    reviews.details = 'Год готовились и дочка поступила на грант! Всем рекомендую готовить детей здесь!'
    reviews.user_id = 5
    reviews.save()
    
    reviews = Reviews()
    reviews.dater = '2023-01-10 17:00:00'
    reviews.rating = 5
    reviews.details = 'Месяц как ходим в центр, на данный момент нравится, насчёт результатов пока сказать ничего не могу, дочке очень нравится'
    reviews.user_id = 7
    reviews.save()
    
    reviews = Reviews()
    reviews.dater = '2023-01-11 18:00:00'
    reviews.rating = 5
    reviews.details = 'Добрый день, начали недавно ходить в центр, пока всё нравится. Спасибо преподавателям'
    reviews.user_id = 9
    reviews.save()
    
    reviews = Reviews()
    reviews.dater = '2023-01-12 19:00:00'
    reviews.rating = 5
    reviews.details = 'Преподаватели грамотно все объясняют, всегда рекомендую своим знакомым'
    reviews.user_id = 11
    reviews.save()
    
    reviews = Reviews()
    reviews.dater = '2023-01-13 15:00:00'
    reviews.rating = 5
    reviews.details = 'Хочу поблагодарить замечательный преподавательский состав.Мой сын поступил в НИШ и в этом есть большая заслуга центра .Спасибо Вам большое!'
    reviews.user_id = 13
    reviews.save()
    
    reviews = Reviews()
    reviews.dater = '2023-01-14 16:00:00'
    reviews.rating = 5
    reviews.details = 'Здравствуйте, моя дочь здесь учится 4 месяцев. Центр подготовки  помогает детям подтянуть свои знания, хорошие молодые учителя, которые могут легко найти общий язык с подростками. Она с удовольствием ходит сюда, мы благодарны вам!'
    reviews.user_id = 15
    reviews.save()
    
    reviews = Reviews()
    reviews.dater = '2023-01-15 17:00:00'
    reviews.rating = 5
    reviews.details = 'Мой ребёнок ходит уже как 3-ий месяц ,оценки значительно улучшились. Хорошое место и преподаватели'
    reviews.user_id = 17
    reviews.save()
    
    reviews = Reviews()
    reviews.dater = '2023-01-16 18:00:00'
    reviews.rating = 5
    reviews.details = 'Очень классный центр, моя дочь ходила туда для подготовки в НИШ, пока результатов поступления ещё нет, но она допущена. Ходили целый год, качество хорошее, менторы постоянно звонили, писали с обратной связью.'
    reviews.user_id = 19
    reviews.save()
    
    reviews = Reviews()
    reviews.dater = '2023-01-17 19:00:00'
    reviews.rating = 5
    reviews.details = 'У меня сын закончил 9 класс, и я хочу сказать благодаря учебному центру он получил отличные итоговые оценки за год.'
    reviews.user_id = 21
    reviews.save()

    print("Отзывы добавлены")
    
    ##### Заявки #####
    Claim = apps.get_model("academy", "Claim")

    claim = Claim()
    claim.dater = datetime.datetime.now()
    claim.user_id = 25    
    claim.training_id = 2
    claim.details = 'Прошу записать меня на подготовительные курсы по информатике.'
    claim.save()

    print("Заявки добавлены")
    
    
class Migration(migrations.Migration):

    dependencies = [
        ('academy', '0001_initial'),
    ]
    
    operations = [
        migrations.RunPython(beginning),       
    ]
